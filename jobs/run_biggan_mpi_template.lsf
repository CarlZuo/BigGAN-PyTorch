#BSUB -L /bin/bash
##
## Begin LSF Directives (change only no of required GPUs processes/GPUs and job-name-single name as desired/need)
## - "-n 4" for single AC922, "-n 8" for 2x AC922s, "-n 16" for 4x AC922s etc
##
#BSUB -J "BigGAN256-Places365"
#BSUB -o "runs/BigGAN256-Places365.%J"
#BSUB -n 16
#BSUB -R "span[ptile=4]"
#BSUB -gpu "num=4"
#BSUB -q "normal"
#BSUB -x

#
# Setup User Environement (Python, WMLCE virtual environment etc)
#
HOME2=/nobackup/users/$(whoami)
PYTHON_VIRTUAL_ENVIRONMENT=wmlce-1.6.2
CONDA_ROOT=$HOME2/anaconda3

source ${CONDA_ROOT}/etc/profile.d/conda.sh
conda activate $PYTHON_VIRTUAL_ENVIRONMENT
export EGO_TOP=/opt/ibm/spectrumcomputing

N=4
TRAINFILE=$HOME2/trainfile
rm -rf ${TRAINFILE}

# Set up the GPUs and delete any existing scratch directory
cat > setup.sh << EoF_s
#! /bin/sh
##
if [ \${OMPI_COMM_WORLD_LOCAL_RANK} -eq 0 ]
then
  sudo ppc64_cpu --smt=2                 # Set the SMT mode to 2
  ppc64_cpu --smt                        # Verify the SMT mode
  sudo nvidia-smi -rac                   # For POWER9+V100
  sudo nvidia-smi --compute-mode=DEFAULT # Set the compute mode to DEFAULT
  /bin/rm -rf /tmp/data.${USER}          # Delete the scratch directory
fi
EoF_s

#
# Cleaning CUDA_VISIBLE_DEVICES
#
cat > launch.sh << EoF_s
#! /bin/sh
export NCCL_SOCKET_IFNAME=ib0
export CUDA_VISIBLE_DEVICES=0,1,2,3
exec \$*
EoF_s
chmod +x launch.sh

# Run the program

#
# Runing the training/inference job
# (change only the script name and options after python command)
#
ddlrun --mpiarg "-x EGO_TOP" -v \
  ./launch.sh python \
    $HOME2/BigGAN-PyTorch/main.py \
      --model biggan \
      --dataset Places365 --resolution 256 \
      --parallel --shuffle  --num_workers 8 --batch_size 512 \
      --num_G_accumulations 1 --num_D_accumulations 1 \
      --num_D_steps 1 --G_lr 1e-4 --D_lr 4e-4 --D_B2 0.999 --G_B2 0.999 \
      --G_attn 64 --D_attn 64 \
      --G_nl inplace_relu --D_nl inplace_relu \
      --SN_eps 1e-6 --BN_eps 1e-5 --adam_eps 1e-6 \
      --G_ortho 0.0 \
      --G_shared \
      --G_init ortho --D_init ortho \
      --hier --dim_z 120 --shared_dim 128 \
      --G_eval_mode \
      --G_ch 96 --D_ch 96 \
      --ema --use_ema --ema_start 20000 \
      --skip_init \
      --test_every 2000 --save_every 500 --num_best_copies 5 --num_save_copies 2 --seed 0 \
      --multiprocessing-distributed \
      --dist-backend ddl --world-size ${N}
      #--dist-url file://${TRAINFILE} --world-size ${N}

#
# EoF
#
